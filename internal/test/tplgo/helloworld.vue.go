// Code generated by go-vue-ssr: https://github.com/zbysir/go-vue-ssr
// src_hash:3a7e4253dd70ff3faeacd22632df66b8

package tplgo

import (
	"strings"
)

type _ strings.Builder

func (r *Render) Component_helloworld(options *Options) string {
	scope := extendScope(r.Global.Scope, options.Props)
	options.Directives.Exec(r, options)
	_ = scope
	return func() string {
		if interfaceToBool(scope.Get("isShow")) {
			return r.tag("div", true, &Options{
				Class: []string{"VueToNuxtLogo"},
				Slot: map[string]NamedSlotFunc{"abc": func(props map[string]interface{}) string {
					scope := extendScope(scope, map[string]interface{}{"a": props})
					_ = scope
					return "<div>\n        2我是具名slot props msg: " + interfaceToStr(scope.Get("a", "msg"), true) + "\n        2我是具名slot 所属组件属性 age: " + interfaceToStr(scope.Get("age"), true) + "\n      </div>"
				}, "default": func(props map[string]interface{}) string {
					return "<div" + mixinClass(nil, []string{"Triangle", "Triangle--two"}, scope.Get("customClass")) + " style=\"background: #f99; \">\n      我是一个DIV\n    </div>\n\n    name: " + interfaceToStr(interfaceAdd(interfaceAdd(scope.Get("name"), " "), scope.Get("name")), true) + "\n    info:\n\n    " + r.Component_text(&Options{
						Props: map[string]interface{}{"list": scope.Get("list")},
						Slot: map[string]NamedSlotFunc{"abc": func(props map[string]interface{}) string {
							scope := extendScope(scope, map[string]interface{}{"a": props})
							_ = scope
							return "<div>\n        1我是具名slot props msg: " + interfaceToStr(scope.Get("a", "msg"), true) + "\n        1我是具名slot 所属组件属性 age: " + interfaceToStr(scope.Get("age"), true) + "\n      </div>"
						}, "default": func(props map[string]interface{}) string { return "" }},
						P:     options,
						Scope: scope,
					}) + r.Component_text(&Options{
						Props: map[string]interface{}{"list": scope.Get("list")},
						Slot: map[string]NamedSlotFunc{"abc": func(props map[string]interface{}) string {
							scope := extendScope(scope, map[string]interface{}{"a": props})
							_ = scope
							return "<div>\n        2我是具名slot props msg: " + interfaceToStr(scope.Get("a", "msg"), true) + "\n        2我是具名slot 所属组件属性 age: " + interfaceToStr(scope.Get("age"), true) + "\n      </div>"
						}, "default": func(props map[string]interface{}) string { return "" }, "e": func(props map[string]interface{}) string {
							scope := extendScope(scope, map[string]interface{}{"slotProps": props})
							_ = scope
							return "<div>\n        xxe\n      </div>"
						}},
						P:     options,
						Scope: scope,
					}) + func() string {
						if interfaceToBool(!interfaceToBool(scope.Get("isShow"))) {
							return "<div>显示隐藏</div>"
						}
						return ""
					}() + r.Component_class(&Options{
						PropsClass: scope.Get("customClass"),
						Class:      []string{"d", "e", "f"},
						Slot:       map[string]NamedSlotFunc{"default": func(props map[string]interface{}) string { return "" }},
						P:          options,
						Scope:      scope,
					}) + r.Component_component(&Options{
						PropsStyle: map[string]interface{}{"padding": "50px"},
						Props:      map[string]interface{}{"is": "xstyle"},
						Style:      map[string]string{"margin": "50px"},
						Slot:       map[string]NamedSlotFunc{"default": func(props map[string]interface{}) string { return "" }},
						P:          options,
						Scope:      scope,
					}) + r.Component_component(&Options{
						Props: map[string]interface{}{"is": "class"},
						Slot:  map[string]NamedSlotFunc{"default": func(props map[string]interface{}) string { return "" }},
						P:     options,
						Scope: scope,
					}) + r.Component_xStyle(&Options{
						Slot:  map[string]NamedSlotFunc{"default": func(props map[string]interface{}) string { return "" }},
						P:     options,
						Scope: scope,
					}) + r.Component_xattr(&Options{
						Props: map[string]interface{}{"imgUrl": scope.Get("imgUrl"), "src": scope.Get("name")},
						Attrs: map[string]string{"id": "attr", "type": "input"},
						Slot:  map[string]NamedSlotFunc{"default": func(props map[string]interface{}) string { return "" }},
						P:     options,
						Scope: scope,
					})
				}, "e": func(props map[string]interface{}) string {
					scope := extendScope(scope, map[string]interface{}{"slotProps": props})
					_ = scope
					return "<div>\n        xxe\n      </div>"
				}},
				P:     options,
				Scope: scope,
			})
		}
		return ""
	}()
}
