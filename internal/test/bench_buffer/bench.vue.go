// Code generated by go-vue-ssr: https://github.com/zbysir/go-vue-ssr
// src_hash:a336d472441d7e80aea1de88176841ec

package bench_buffer

import (
	"strings"
)

type _ strings.Builder

func (r *Render) Component_bench(options *Options) Spans {
	scope := extendScope(r.Global.Scope, options.Props)
	options.Directives.Exec(r, options)
	_ = scope
	g := r.newSpans()
	g.AppendSpans(r.tag("div", true, &Options{
		PropsClass: map[string]interface{}{"a": true},
		Class:      []string{"b"},
		Slots: map[string]NamedSlotFunc{"default": func(props Props) Spans {
			g := r.newSpans()
			g.AppendString("<span" + mixinClass(nil, []string{"d"}, map[string]interface{}{"c": true}) + mixinAttr(nil, nil, map[string]interface{}{"a": 1}) + ">")
			g.AppendString("\n        " + interfaceToStr(scope.Get("data", "msg"), true) + "\n    ")

			g.AppendString("</span>")

			for index, item := range interface2Slice(scope.Get("data", "c")) {
				g.AppendSpans(func(xscope *Scope) Spans {
					scope := extendScope(xscope, map[string]interface{}{
						"$index": index,
						"item":   item,
					})
					_ = scope
					g := r.newSpans()
					g.AppendString("<div>")
					g.AppendSpans(r.Component_bench(&Options{
						Props: map[string]interface{}{"data": scope.Get("item")},
						Slots: map[string]NamedSlotFunc{"default": func(props Props) Spans {
							g := r.newSpans()

							return g
						}},
						P:     options,
						Scope: scope,
					}))

					g.AppendString("</div>")
					return g
				}(scope))
			}

			return g
		}},
		P:     options,
		Scope: scope,
	}))
	return g
}
