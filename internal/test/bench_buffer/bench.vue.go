// Code generated by go-vue-ssr: https://github.com/zbysir/go-vue-ssr
// src_hash:b80af1e00c02e47313bb4a0ed33bb6e4

package bench_buffer

import (
	"strings"
)

func (r *Render) Component_bench(options *Options) strings.Builder {
	this := extendMap(r.Prototype, options.Props)
	_ = this
	return r.Tag("div", true, &Options{
		PropsClass: map[string]interface{}{"a": true},
		Class:      []string{"b"},
		Slot: map[string]NamedSlotFunc{"default": func(props map[string]interface{}) strings.Builder {
			var c strings.Builder
			c.WriteString("<span")
			c.WriteString(mixinClass(nil, []string{"d"}, map[string]interface{}{"c": true}))
			c.WriteString(mixinAttr(nil, nil, map[string]interface{}{"a": "1"}))
			c.WriteString(">\n        ")
			c.WriteString(interfaceToStr(lookInterface(this, "data", "msg"), true))
			c.WriteString("\n    </span>")

			for index, item := range interface2Slice(lookInterface(this, "data", "c")) {
				func(xdata map[string]interface{}) {
					this := extendMap(xdata, map[string]interface{}{
						"$index": index,
						"item":   item,
					})

					c.WriteString("<div>")
					s := r.Component_bench(&Options{
						Props: map[string]interface{}{"data": lookInterface(this, "item")},
						Slot:  map[string]NamedSlotFunc{"default": func(props map[string]interface{}) strings.Builder { return strings.Builder{} }},
						P:     options,
						Data:  this,
					})
					c.WriteString(s.String())
					c.WriteString("</div>")
				}(this)
			}
			return c
		}},
		P:    options,
		Data: this,
	})
}
